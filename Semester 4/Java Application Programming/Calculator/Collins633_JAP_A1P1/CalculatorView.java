/**
 * File name: CalculatorView.java
 * Author: William Collins, 040652633
 * Course: CST8221 – JAP
 * Assignment: 1
 * Date: June 1, 2011
 * Professor: Svillen (the Villain) Ranev
 * Purpose: Controls the main functionality of the calculator
 * Class List: CalculatorView - The main panel display
 * 			   Controller - handles events generated by the calculator buttons
 * 
 * @author William Collins
 * @version 1
 * @see Calculator
 * @since 1.6
 * 
 */
package Calculator;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.BevelBorder;


public class CalculatorView extends JPanel{
	/**
	 * The field that will display the calculator results
	 */
	private JTextField display;
	/**
	 * An error indicator used to indicate an error. Obvious, right?
	 */
	private JLabel error;
	/**
	 * The decimal button on the calculator. Who would have guessed it?
	 */
	private JButton dotButton;
	
	//Private constants to be used only within this class
	private final String DOT_BUTTON = ".";
	private final String CLEAR_BUTTON = "C";
	private final String EQUALS_BUTTON = "=";	
	private final String BACKSPACE_BUTTON_TEXT = "<<";
	private final String BACKSPACE_TOOLTIP = "Backspace (Alt-B)";
	
	//These are the names that will be used to create the main calculator butttons
	private final String buttonNames[] = { 
		"7", "8", "9", "/", "P",
		"4", "5", "6", "*", "\u221A",
		"1", "2", "3", "-", "C",
		"0", ".", "+/-", "+", "="	
	};
	
	public CalculatorView(){

		//Get our panel ready
		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(0, 2, 5, 2));
		
		//Create our panels
		JPanel northPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 5, 0)); //The panel that will hold everything above the main calculator buttons
		JPanel displayPanel = new JPanel(); //The first row of components at the top of the calculator
		JPanel radioPanel = new JPanel(); // The panel for the row of components under the display panel
		
		//Set up our awesome error label and add it to the view
		error = new JLabel();
		error.setOpaque(true);
		error.setBackground(Color.GREEN);
		error.setPreferredSize(new Dimension(20, 20));	
		
		//Set up our extreme text display
		display = new JTextField("0.0", 15);
		display.setEditable(false);
		display.setHorizontalAlignment(JTextField.RIGHT);
		display.setBackground(Color.WHITE);
		
		//Set up our super awesome backspace button
		JButton backspace = new JButton(BACKSPACE_BUTTON_TEXT); //The backspace button
		backspace.setSize(20, 20);
		backspace.setForeground(Color.BLACK);
		backspace.setBorder(BorderFactory.createEmptyBorder());
		backspace.setToolTipText(BACKSPACE_TOOLTIP);
		backspace.setMnemonic(KeyEvent.VK_B);
		backspace.setOpaque(false);
		backspace.setContentAreaFilled(false);
		
		//Add the display information to the display panel
		displayPanel.add(error);
		displayPanel.add(display);
		displayPanel.add(backspace);	

		//Time to set up the radio buttons
		ButtonGroup radioGroup = new ButtonGroup(); //Controls how the radio buttons behave
		JRadioButton intButton = new JRadioButton("Integer"); //The button specifying that we are calculating integers
		JRadioButton floatButton = new JRadioButton("Float"); //The button specifying that we are calculating floating point numbers
		
		intButton.setBackground(Color.CYAN);
		floatButton.setBackground(Color.PINK);
		floatButton.setSelected(true);
		floatButton.setPreferredSize(intButton.getPreferredSize());
		intButton.setVerticalAlignment(SwingConstants.CENTER);
		radioGroup.add(intButton);
		radioGroup.add(floatButton);
		radioPanel.add(intButton);
		radioPanel.add(floatButton);
		radioPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLineBorder(Color.BLUE, 2), BorderFactory.createLineBorder(Color.BLUE)));
		radioPanel.setPreferredSize(new Dimension(215, 40));
		
		//Set up the action listeners for appropriate buttons
		backspace.addActionListener(new Controller());
		intButton.addActionListener(new Controller());
		floatButton.addActionListener(new Controller());

		//Add the display and the radio button panel to the NORTH panel
		northPanel.add(displayPanel);
		northPanel.add(radioPanel);
		
		//Calculate the dimension for the NORTH Panel
		Dimension sizeOfNorth = new Dimension(260, 73);
		northPanel.setPreferredSize(sizeOfNorth);
		
		//Finally add this sweet new panel
		add(northPanel, BorderLayout.NORTH);
		
		//Now add the array of buttons
		JPanel buttonPanel = new JPanel(new GridLayout(4, 5, 5, 5)); //The panel that will hold the main calculator buttons
		for (String s: buttonNames){
			addButton(buttonPanel, s, new Controller());
		}
		add(buttonPanel, BorderLayout.CENTER);
		
		
	}
	
	/**
	 * @param c: The container that the button will be placed into
	 * @param s: The name of the button to be added
	 * @param handler: An action listener that will handle the button's events
	 */
	private void addButton(Container c, String s, ActionListener handler){
		
		JButton newButton = new JButton(s); //the new button to be added
		newButton.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
		
		//Take care of certain special buttons
		if (s.equals(CLEAR_BUTTON)){
			newButton.setForeground(Color.BLACK);
			newButton.setBackground(Color.RED);
		}
		else if (s.equals(EQUALS_BUTTON)){
			newButton.setForeground(Color.BLACK);
			newButton.setBackground(Color.YELLOW);
		}
		else {
			newButton.setForeground(Color.PINK);	
		}
		
		newButton.addActionListener(handler);
		c.add(newButton);
		
		if (s.equals(DOT_BUTTON)){
			dotButton = newButton;
		}
	}
	
	private class Controller implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			
			if (e.getSource() instanceof AbstractButton){
				display.setText(e.getActionCommand());
			}
			
		}
		
	}
	
}
