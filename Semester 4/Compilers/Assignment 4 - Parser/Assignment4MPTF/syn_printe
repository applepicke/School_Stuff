/* Parser error printing function, Assignmet 4, Summer 2010
 */
void syn_printe(){
Token t = lookahead;

printf("PLATY: Syntax error:  Line:%3d\n",line);
printf("*****  Token code:%3d Attribute: ", t.code);
switch(t.code){
	case  ERR_T: /* ERR_T     0   Error token */
		printf("%s\n",t.attribute.err_lex);
	 break;
	case  SEOF_T: /*SEOF_T    1   Source end-of-file token */
		printf("NA\n" );
	 break;
	case  AVID_T: /* AVID_T    2   Arithmetic Variable identifier token */
	case  SVID_T :/* SVID_T    3  String Variable identifier token */
		printf("%s\n",sym_table.pstvr[t.attribute.get_int].plex);
	 break;
	case  FPL_T: /* FPL_T     4  Floating point literal token */
		printf("%5.1f\n",t.attribute.flt_value);
	 break;
	case INL_T: /* INL_T      5   Integer literal token */
	        printf("%d\n",t.attribute.get_int);
	 break;
	case STR_T:/* STR_T     6   String literal token */
	        printf("%s\n",(str_LTBL->ca_head + t.attribute.get_int));
	break;
        
        case SCC_OP_T: /* 7   String concatenation operator token */
	        printf("NA\n" );
	break;
	
	case  ASS_OP_T:/* ASS_OP_T  8   Assignment operator token */
		printf("NA\n" );
	break;
	case  ART_OP_T:/* ART_OP_T  9   Arithmetic operator token */
		printf("%d\n",t.attribute.get_int);
	break;
	case  REL_OP_T: /*REL_OP_T  10   Relational operator token */ 
		printf("%d\n",t.attribute.get_int);
	break;
	case  LOG_OP_T:/*LOG_OP_T 11  Logical operator token */
		printf("%d\n",t.attribute.get_int);
	break;
	
	case  LPR_T: /*LPR_T    12  Left parenthesis token */
		printf("NA\n" );
	break;
	case  RPR_T: /*RPR_T    13  Right parenthesis token */
	        printf("NA\n" );
	break;
	case LBR_T: /*    14   Left brace token */
	        printf("NA\n" );
	break;
	case RBR_T: /*    15  Right brace token */
	        printf("NA\n" );
	break;
		
	case KW_T: /*     16   Keyword token */
	        printf("%s\n",kw_table [t.attribute.get_int]);
	break;
	
	case COM_T: /* 17   Comma token */
	        printf("NA\n");
	break;
	case EOS_T: /*    18  End of statement *(semi - colon) */
	        printf("NA\n" );
	break; 		
	default:
	        printf("PLATY: Scanner error: invalid token code: %d\n", t.code);
}