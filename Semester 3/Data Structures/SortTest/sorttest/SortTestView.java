/*
 * SortTestView.java
 */
package sorttest;

import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.ActionMap;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/** The application's main frame. */
public class SortTestView extends FrameView {
  private String sSizePrompt;
  private boolean bShowingPromptString;
  private SortTest sortTest;
  private ResourceMap resourceMap;

  public SortTestView(SingleFrameApplication app) {
    super(app);

    //Locale[] aAllAvialableLocales = Locale.getAvailableLocales();
    //Locale locale = new Locale("en", "CA");
    //Locale locale = new Locale("fr", "CA");
    //Locale.setDefault(new Locale("bg", "BG"));
    //ResourceBundle captions= ResourceBundle.getBundle("SortTestView",locale);
    //yesCaption =captions.getString("yesMessage");
    //noCaption  = captions.getString("noMessage");
    resourceMap = Application.getInstance(SortTestApp.class).getContext().getResourceMap(SortTestView.class);
    String sResourcesDir = resourceMap.getResourcesDir();
    //resourceMap.
    //File fResourceDirectory = new File(sResourcesDir);
    File fResourceDirectory = new File("c:");
    String[] asListOfFiles = fResourceDirectory.list();
    //System.
    //List<String> lBundleNames = resourceMap.getBundleNames();
    //resourceMap.
    // ResourceBundle.Control.getCandidateLocales("",new Locale("en","CA"));
    //ResourceBundle.getBundle();
    sortTest = null;
    initComponents();
    bShowingPromptString = true;
    //ResourceMap resourceMap = Application.getInstance(SortTestApp.class).getContext().getResourceMap(SortTestView.class);
    //sSizePrompt = resourceMap.getString("jtfSizeValue.text"); // NOI18N
    sSizePrompt = resourceMap.getString("jtfSizeValue.text"); // NOI18N
    jtfSizeValue.setText(sSizePrompt);
    jbKillSort.setEnabled(false);
    for (SortTest.SortTypeMethod stm : SortTest.SortTypeMethod.values()) {
      jcbAlgorithmSelection.addItem(stm);
    }
    jbKillDragon.setVisible(false);
  }

  @Action
  public void showAboutBox() {
    // NetBeans structures as a singleton design, but re-instantiation results in automatic remapping of locale/language dependencies
    JFrame mainFrame = SortTestApp.getApplication().getMainFrame();
    JDialog aboutBox = new SortTestAboutBox(mainFrame);
    aboutBox.setLocationRelativeTo(mainFrame);
    SortTestApp.getApplication().show(aboutBox);
  }

  /** This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainPanel = new JPanel();
    jtfSizeValue = new JTextField();
    jlSizeLabel = new JLabel();
    jlAlgorithmSelectionLabel = new JLabel();
    jcbAlgorithmSelection = new JComboBox();
    jlElapseTimeLabel = new JLabel();
    jlStatusLabel = new JLabel();
    jlElapseTimeValue = new JLabel();
    jlStatusValue = new JLabel();
    jbBeginSort = new JButton();
    jScrollPane2 = new JScrollPane();
    jtpSortResults = new JTextPane();
    jcbFixedRandomizingSeed = new JCheckBox();
    jbKillSort = new JButton();
    jbKillDragon = new JButton();
    jbAboutDialog = new JButton();
    jScrollPane1 = new JScrollPane();
    jtpTitleExplanation = new JTextPane();
    jbExit = new JButton();
    jrbFrench = new JRadioButton();
    jrbEnglish = new JRadioButton();
    jrbBulgarian = new JRadioButton();
    jbGarbageCollection = new JButton();
    bgLanguageButtonGroup = new ButtonGroup();

    mainPanel.setMinimumSize(new Dimension(400, 350));
    mainPanel.setName("mainPanel"); // NOI18N
    mainPanel.setPreferredSize(new Dimension(600, 600));

    ResourceMap resourceMap = Application.getInstance(SortTestApp.class).getContext().getResourceMap(SortTestView.class);
    jtfSizeValue.setFont(resourceMap.getFont("jtfSizeValue.font")); // NOI18N
    jtfSizeValue.setText(resourceMap.getString("jtfSizeValue.text")); // NOI18N
    jtfSizeValue.setToolTipText(resourceMap.getString("jtfSizeValue.toolTipText")); // NOI18N
    jtfSizeValue.setName("jtfSizeValue"); // NOI18N
    jtfSizeValue.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jtfSizeValueActionPerformed(evt);
      }
    });
    jtfSizeValue.addKeyListener(new KeyAdapter() {
      public void keyTyped(KeyEvent evt) {
        jtfSizeValueKeyTyped(evt);
      }
    });

    jlSizeLabel.setDisplayedMnemonic('N');
    jlSizeLabel.setLabelFor(jtfSizeValue);
    jlSizeLabel.setText(resourceMap.getString("jlSizeLabel.text")); // NOI18N
    jlSizeLabel.setName("jlSizeLabel"); // NOI18N

    jlAlgorithmSelectionLabel.setDisplayedMnemonic('A');
    jlAlgorithmSelectionLabel.setFont(resourceMap.getFont("jlAlgorithmSelectionLabel.font")); // NOI18N
    jlAlgorithmSelectionLabel.setLabelFor(jcbAlgorithmSelection);
    jlAlgorithmSelectionLabel.setText(resourceMap.getString("jlAlgorithmSelectionLabel.text")); // NOI18N
    jlAlgorithmSelectionLabel.setName("jlAlgorithmSelectionLabel"); // NOI18N

    jcbAlgorithmSelection.setToolTipText(resourceMap.getString("jcbAlgorithmSelection.toolTipText")); // NOI18N
    jcbAlgorithmSelection.setName("jcbAlgorithmSelection"); // NOI18N
    jcbAlgorithmSelection.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jcbAlgorithmSelectionActionPerformed(evt);
      }
    });

    jlElapseTimeLabel.setLabelFor(jlElapseTimeValue);
    jlElapseTimeLabel.setText(resourceMap.getString("jlElapseTimeLabel.text")); // NOI18N
    jlElapseTimeLabel.setName("jlElapseTimeLabel"); // NOI18N

    jlStatusLabel.setLabelFor(jlStatusValue);
    jlStatusLabel.setText(resourceMap.getString("jlStatusLabel.text")); // NOI18N
    jlStatusLabel.setName("jlStatusLabel"); // NOI18N

    jlElapseTimeValue.setText(resourceMap.getString("jlElapseTimeValue.text")); // NOI18N
    jlElapseTimeValue.setName("jlElapseTimeValue"); // NOI18N

    jlStatusValue.setText(resourceMap.getString("jlStatusValue.text")); // NOI18N
    jlStatusValue.setName("jlStatusValue"); // NOI18N

    jbBeginSort.setMnemonic('B');
    jbBeginSort.setText(resourceMap.getString("jbBeginSort.text")); // NOI18N
    jbBeginSort.setToolTipText(resourceMap.getString("jbBeginSort.toolTipText")); // NOI18N
    jbBeginSort.setName("jbBeginSort"); // NOI18N
    jbBeginSort.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jbBeginSortActionPerformed(evt);
      }
    });

    jScrollPane2.setName("jScrollPane2"); // NOI18N

    jtpSortResults.setContentType(resourceMap.getString("jtpSortResults.contentType")); // NOI18N
    jtpSortResults.setEditable(false);
    jtpSortResults.setFont(resourceMap.getFont("jtpSortResults.font")); // NOI18N
    jtpSortResults.setText(resourceMap.getString("jtpSortResults.text")); // NOI18N
    jtpSortResults.setFocusable(false);
    jtpSortResults.setMinimumSize(new Dimension(6, 200));
    jtpSortResults.setName("jtpSortResults"); // NOI18N
    jtpSortResults.setPreferredSize(new Dimension(500, 400));
    jScrollPane2.setViewportView(jtpSortResults);

    jcbFixedRandomizingSeed.setMnemonic('F');
    jcbFixedRandomizingSeed.setText(resourceMap.getString("jcbFixedRandomizingSeed.text")); // NOI18N
    jcbFixedRandomizingSeed.setToolTipText(resourceMap.getString("jcbFixedRandomizingSeed.toolTipText")); // NOI18N
    jcbFixedRandomizingSeed.setFocusable(false);
    jcbFixedRandomizingSeed.setName("jcbFixedRandomizingSeed"); // NOI18N

    jbKillSort.setText(resourceMap.getString("jbKillSort.text")); // NOI18N
    jbKillSort.setToolTipText(resourceMap.getString("jbKillSort.toolTipText")); // NOI18N
    jbKillSort.setEnabled(false);
    jbKillSort.setName("jbKillSort"); // NOI18N
    jbKillSort.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jbKillSortActionPerformed(evt);
      }
    });

    jbKillDragon.setIcon(resourceMap.getIcon("jbKillDragon.icon")); // NOI18N
    jbKillDragon.setText(resourceMap.getString("jbKillDragon.text")); // NOI18N
    jbKillDragon.setToolTipText(resourceMap.getString("jbKillDragon.toolTipText")); // NOI18N
    jbKillDragon.setCursor(new Cursor(Cursor.WAIT_CURSOR));
    jbKillDragon.setName("jbKillDragon"); // NOI18N
    jbKillDragon.setRolloverEnabled(false);
    jbKillDragon.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jbKillDragonActionPerformed(evt);
      }
    });

    ActionMap actionMap = Application.getInstance(SortTestApp.class).getContext().getActionMap(SortTestView.class, this);
    jbAboutDialog.setAction(actionMap.get("showAboutBox")); // NOI18N
    jbAboutDialog.setText(resourceMap.getString("jbAboutDialog.text")); // NOI18N
    jbAboutDialog.setToolTipText(resourceMap.getString("jbAboutDialog.toolTipText")); // NOI18N
    jbAboutDialog.setName("jbAboutDialog"); // NOI18N

    jScrollPane1.setName("jScrollPane1"); // NOI18N

    jtpTitleExplanation.setContentType(resourceMap.getString("jtpTitleExplanation.contentType")); // NOI18N
    jtpTitleExplanation.setEditable(false);
    jtpTitleExplanation.setText(resourceMap.getString("jtpTitleExplanation.text")); // NOI18N
    jtpTitleExplanation.setFocusable(false);
    jtpTitleExplanation.setName("jtpTitleExplanation"); // NOI18N
    jScrollPane1.setViewportView(jtpTitleExplanation);

    jbExit.setAction(actionMap.get("quit")); // NOI18N
    jbExit.setText(resourceMap.getString("jbExit.text")); // NOI18N
    jbExit.setName("jbExit"); // NOI18N

    bgLanguageButtonGroup.add(jrbFrench);
    jrbFrench.setText(resourceMap.getString("jrbFrench.text")); // NOI18N
    jrbFrench.setName("jrbFrench"); // NOI18N
    jrbFrench.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jrbFrenchActionPerformed(evt);
      }
    });

    bgLanguageButtonGroup.add(jrbEnglish);
    jrbEnglish.setSelected(true);
    jrbEnglish.setText(resourceMap.getString("jrbEnglish.text")); // NOI18N
    jrbEnglish.setName("jrbEnglish"); // NOI18N
    jrbEnglish.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jrbEnglishActionPerformed(evt);
      }
    });

    bgLanguageButtonGroup.add(jrbBulgarian);
    jrbBulgarian.setText(resourceMap.getString("jrbBulgarian.text")); // NOI18N
    jrbBulgarian.setName("jrbBulgarian"); // NOI18N
    jrbBulgarian.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jrbBulgarianActionPerformed(evt);
      }
    });

    jbGarbageCollection.setText(resourceMap.getString("jbGarbageCollection.text")); // NOI18N
    jbGarbageCollection.setToolTipText(resourceMap.getString("jbGarbageCollection.toolTipText")); // NOI18N
    jbGarbageCollection.setName("jbGarbageCollection"); // NOI18N
    jbGarbageCollection.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        jbGarbageCollectionActionPerformed(evt);
      }
    });

    GroupLayout mainPanelLayout = new GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup(Alignment.LEADING)
      .addGroup(mainPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(mainPanelLayout.createParallelGroup(Alignment.LEADING)
          .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
          .addGroup(mainPanelLayout.createSequentialGroup()
            .addGroup(mainPanelLayout.createParallelGroup(Alignment.LEADING)
              .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jbAboutDialog)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jrbEnglish)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jrbFrench)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jrbBulgarian))
              .addComponent(jlAlgorithmSelectionLabel)
              .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(Alignment.TRAILING, false)
                  .addGroup(Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                    .addComponent(jbBeginSort, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbKillSort, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE))
                  .addComponent(jcbAlgorithmSelection, Alignment.LEADING, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                    .addComponent(jlSizeLabel)
                    .addPreferredGap(ComponentPlacement.RELATED)
                    .addComponent(jtfSizeValue, GroupLayout.PREFERRED_SIZE, 104, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jcbFixedRandomizingSeed))
              .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jlElapseTimeLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jlElapseTimeValue, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE))
              .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jlStatusLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jlStatusValue, GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
              .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 366, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(mainPanelLayout.createParallelGroup(Alignment.TRAILING)
              .addComponent(jbKillDragon, GroupLayout.PREFERRED_SIZE, 153, GroupLayout.PREFERRED_SIZE)
              .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(jbGarbageCollection)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jbExit)))))
        .addGap(10, 10, 10))
    );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup(Alignment.LEADING)
      .addGroup(mainPanelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(mainPanelLayout.createParallelGroup(Alignment.LEADING)
          .addGroup(mainPanelLayout.createSequentialGroup()
            .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(mainPanelLayout.createParallelGroup(Alignment.BASELINE)
              .addComponent(jlSizeLabel)
              .addComponent(jtfSizeValue, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
              .addComponent(jcbFixedRandomizingSeed))
            .addPreferredGap(ComponentPlacement.UNRELATED)
            .addComponent(jlAlgorithmSelectionLabel)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(jcbAlgorithmSelection, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(mainPanelLayout.createParallelGroup(Alignment.BASELINE)
              .addComponent(jbBeginSort)
              .addComponent(jbKillSort))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(mainPanelLayout.createParallelGroup(Alignment.BASELINE)
              .addComponent(jlElapseTimeLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)
              .addComponent(jlElapseTimeValue))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(mainPanelLayout.createParallelGroup(Alignment.BASELINE)
              .addComponent(jlStatusLabel)
              .addComponent(jlStatusValue, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE)))
          .addComponent(jbKillDragon))
        .addGap(11, 11, 11)
        .addGroup(mainPanelLayout.createParallelGroup(Alignment.BASELINE)
          .addComponent(jbAboutDialog)
          .addComponent(jbExit)
          .addComponent(jrbFrench)
          .addComponent(jrbEnglish)
          .addComponent(jrbBulgarian)
          .addComponent(jbGarbageCollection))
        .addPreferredGap(ComponentPlacement.RELATED)
        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        .addContainerGap())
    );

    setComponent(mainPanel);
  }// </editor-fold>//GEN-END:initComponents

    private void jbBeginSortActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jbBeginSortActionPerformed
      try {
        Integer.parseInt(jtfSizeValue.getText());
        new Thread(new ThreadedSort()).start();
      } catch (NumberFormatException e) {
      }
    }//GEN-LAST:event_jbBeginSortActionPerformed

    private void jtfSizeValueKeyTyped(KeyEvent evt) {//GEN-FIRST:event_jtfSizeValueKeyTyped
      int nNumCharacters = jtfSizeValue.getText().length();
      if (nNumCharacters == 0) {
        jtfSizeValue.setText(sSizePrompt);
        bShowingPromptString = true;
      } else { // already some characters in edit control, could be either 1) initial prompting string 2) some validated digits
        char charKeyPressed = evt.getKeyChar();
        if (!Character.isDigit(charKeyPressed)) { // non-digit characters are expunged
          evt.consume();
        } else { // must be a digit
          if (bShowingPromptString) {
            jtfSizeValue.setText("");
            bShowingPromptString = false;
          }
        }
      }
    }//GEN-LAST:event_jtfSizeValueKeyTyped

    private void jtfSizeValueActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jtfSizeValueActionPerformed
      if (jbBeginSort.isEnabled())
        jbBeginSortActionPerformed(evt);
    }//GEN-LAST:event_jtfSizeValueActionPerformed

    private void jcbAlgorithmSelectionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jcbAlgorithmSelectionActionPerformed
      if (jbBeginSort.isEnabled())
        jbBeginSortActionPerformed(evt);
    }//GEN-LAST:event_jcbAlgorithmSelectionActionPerformed

    private void jbKillSortActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jbKillSortActionPerformed
      if (!jbBeginSort.isEnabled()) {
        sortTest.killSort();
        JOptionPane.showMessageDialog(this.mainPanel, resourceMap.getString("SORT_TERMINATED_BEFORE_COMPLETION"));
        //JOptionPane.showMessageDialog(this.mainPanel, java.util.ResourceBundle.getBundle("sorttest/resources/SortTestView").getString("SORT_TERMINATED_BEFORE_COMPLETION"));
      }
      jbKillSort.setEnabled(false);
      jbKillDragon.setVisible(false);
    }//GEN-LAST:event_jbKillSortActionPerformed

    private void jbKillDragonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jbKillDragonActionPerformed
      if (!jbBeginSort.isEnabled()) {
        jbKillSortActionPerformed(evt);
//        sortTest.killSort();
//        JOptionPane.showMessageDialog(this.mainPanel, "Sort terminated before completion!");
      }
//      jbKillSort.setEnabled(false);
//      jbKillDragon.setVisible(false);
    }//GEN-LAST:event_jbKillDragonActionPerformed

    private void jrbEnglishActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jrbEnglishActionPerformed
      Locale.setDefault(new Locale("en", "CA"));
      refreshTextFollowingNewLocale();
    }//GEN-LAST:event_jrbEnglishActionPerformed

    private void jrbFrenchActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jrbFrenchActionPerformed
      Locale.setDefault(new Locale("fr", "CA"));
      refreshTextFollowingNewLocale();
    }//GEN-LAST:event_jrbFrenchActionPerformed

    private void jrbBulgarianActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jrbBulgarianActionPerformed
      Locale.setDefault(new Locale("bg", "BG"));
      refreshTextFollowingNewLocale();
    }//GEN-LAST:event_jrbBulgarianActionPerformed

    private void jbGarbageCollectionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jbGarbageCollectionActionPerformed
      System.gc();
    }//GEN-LAST:event_jbGarbageCollectionActionPerformed

  private void refreshTextFollowingNewLocale() {
    jlAlgorithmSelectionLabel.setText(resourceMap.getString("jlAlgorithmSelectionLabel.text")); // NOI18N
    jcbAlgorithmSelection.setToolTipText(resourceMap.getString("jcbAlgorithmSelection.toolTipText")); // NOI18N
    if (bShowingPromptString)
      jtfSizeValue.setText(resourceMap.getString("jtfSizeValue.text")); // NOI18N
    jtfSizeValue.setToolTipText(resourceMap.getString("jtfSizeValue.toolTipText")); // NOI18N

    jlSizeLabel.setText(resourceMap.getString("jlSizeLabel.text")); // NOI18N
    jlElapseTimeLabel.setText(resourceMap.getString("jlElapseTimeLabel.text")); // NOI18N
    jlStatusLabel.setText(resourceMap.getString("jlStatusLabel.text")); // NOI18N
    jlElapseTimeValue.setText(resourceMap.getString("jlElapseTimeValue.text")); // NOI18N
    jlStatusValue.setText(resourceMap.getString("jlStatusValue.text")); // NOI18N
    jbBeginSort.setText(resourceMap.getString("jbBeginSort.text")); // NOI18N
    jbBeginSort.setToolTipText(resourceMap.getString("jbBeginSort.toolTipText")); // NOI18N
    jtpSortResults.setText(resourceMap.getString("jtpSortResults.text")); // NOI18N
    jcbFixedRandomizingSeed.setText(resourceMap.getString("jcbFixedRandomizingSeed.text")); // NOI18N
    jcbFixedRandomizingSeed.setToolTipText(resourceMap.getString("jcbFixedRandomizingSeed.toolTipText")); // NOI18N
    jbKillSort.setText(resourceMap.getString("jbKillSort.text")); // NOI18N
    jbKillSort.setToolTipText(resourceMap.getString("jbKillSort.toolTipText")); // NOI18N
    jbKillDragon.setText(resourceMap.getString("jbKillDragon.text")); // NOI18N
    jbKillDragon.setToolTipText(resourceMap.getString("jbKillDragon.toolTipText")); // NOI18N
    jbAboutDialog.setText(resourceMap.getString("jbAboutDialog.text")); // NOI18N
    jbAboutDialog.setToolTipText(resourceMap.getString("jbAboutDialog.toolTipText")); // NOI18N
    jtpTitleExplanation.setText(resourceMap.getString("jtpTitleExplanation.text")); // NOI18N
    jbExit.setText(resourceMap.getString("jbExit.text")); // NOI18N
    jbExit.setToolTipText(resourceMap.getString("jbExit.toolTipText")); // NOI18N
    jbGarbageCollection.setText(resourceMap.getString("jbGarbageCollection.text"));
    jbGarbageCollection.setToolTipText(resourceMap.getString("jbGarbageCollection.toolTipText"));
    //jbBeginSort.setToolTipText(resourceMap.getString("jbBeginSort.toolTipText")); // NOI18N
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private ButtonGroup bgLanguageButtonGroup;
  private JScrollPane jScrollPane1;
  private JScrollPane jScrollPane2;
  private JButton jbAboutDialog;
  private JButton jbBeginSort;
  private JButton jbExit;
  private JButton jbGarbageCollection;
  private JButton jbKillDragon;
  private JButton jbKillSort;
  private JComboBox jcbAlgorithmSelection;
  private JCheckBox jcbFixedRandomizingSeed;
  private JLabel jlAlgorithmSelectionLabel;
  private JLabel jlElapseTimeLabel;
  private JLabel jlElapseTimeValue;
  private JLabel jlSizeLabel;
  private JLabel jlStatusLabel;
  private JLabel jlStatusValue;
  private JRadioButton jrbBulgarian;
  private JRadioButton jrbEnglish;
  private JRadioButton jrbFrench;
  private JTextField jtfSizeValue;
  private JTextPane jtpSortResults;
  private JTextPane jtpTitleExplanation;
  private JPanel mainPanel;
  // End of variables declaration//GEN-END:variables
  //private JDialog aboutBox;

  class ThreadedSort implements Runnable {
    public void run() {
      int nSize;
      try {
        nSize = Integer.parseInt(jtfSizeValue.getText());
      } catch (NumberFormatException nfe) {
        //jtpSortResults.setText("<font face=\"arial,sans-serif\" size=\"2\"><b>Invalid size.</b>");
        jtpSortResults.setText(resourceMap.getString("INVALID_SIZE"));
        return;
      }
      try {
        jbBeginSort.setEnabled(false);
        jtfSizeValue.setEnabled(false);
        jcbAlgorithmSelection.setEnabled(false);
        //jtpSortResults.setText("<font face=\"arial,sans-serif\" size=\"2\"><b>Building Randomized Set of Numbers . . .</b>");
        //String s = resourceMap.getString("BUILDING_RANDOM_NUMBERS");
        jtpSortResults.setText(resourceMap.getString("BUILDING_RANDOM_NUMBERS"));
        sortTest = new SortTest(nSize, jcbFixedRandomizingSeed.isSelected());

        //StringBuilder sbResult = new StringBuilder("<font face=\"arial,sans-serif\" size=\"2\"><b>Before Sorting</b>");
        StringBuilder sbResult = new StringBuilder(resourceMap.getString("BEFORE_SORTING"));
        sbResult.append(sortTest);

        // Sort Algorithms are organized as items in an enum type that is defined inside the SortTest class.
        // The combobox was populated at runtime with each SortTypeMethod enumerated value; the item's toString() method returns the viewable name.
        // Since getSelectedItem() returns an enum value, use that to launch the targeted sort routine.
        SortTest.SortTypeMethod stm = (SortTest.SortTypeMethod) jcbAlgorithmSelection.getSelectedItem();
        jbKillSort.setEnabled(true);
        jbKillDragon.setVisible(true);
        jtpSortResults.setText(String.format(resourceMap.getString("SORTING_WITH_HTML"), stm));
        jlStatusValue.setText(resourceMap.getString("SORTING_WITH") + stm);

        long lElapseTime = sortTest.sort(stm);

        double dElapseTimeInSeconds = (double) lElapseTime / 1000.0;
        boolean bisSorted = sortTest.isSorted();
        jlStatusValue.setText(bisSorted ? resourceMap.getString("SUCCESS") : resourceMap.getString("FAILURE"));
        jlElapseTimeValue.setText(String.format("%.3f", dElapseTimeInSeconds));
        sbResult.append(String.format(resourceMap.getString("AFTER_SORTING_HTML"), stm, (bisSorted ? resourceMap.getString("SUCCESS") : resourceMap.getString("FAILURE")), dElapseTimeInSeconds, sortTest));
        jtpSortResults.setText(sbResult.toString());
        jtfSizeValue.requestFocusInWindow(); // Doesn't seem to do anything useful.
      } catch (InstantiationException e) {
        jlStatusValue.setText("SORT_TEST_CREATION_FAILURE");
        jtpSortResults.setText("FAILED_TO_CREATE_ARRAY");
      } catch (OutOfMemoryError e) {
        jlStatusValue.setText("FAILED_TO_CREATE_ARRAY");
        jtpSortResults.setText(resourceMap.getString("SYNTAX_FOR_HEAP_SPACE"));
      } finally {
        sortTest = null; // and pray that the Java VM will release the memory
        System.gc();
        jbKillDragon.setVisible(false);
        jbKillSort.setEnabled(false);
        jbBeginSort.setEnabled(true);
        jtfSizeValue.setEnabled(true);
        jcbAlgorithmSelection.setEnabled(true);
      } // end try-catch-finally
    } // end run()
  } // end class ThreadedSort
} // end SortTestView

